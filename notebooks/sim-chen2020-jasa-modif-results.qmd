---
title: "Simulation 1 - Census case and selection bias"
format: 
  html:
    self-contained: true
    table-of-contents: true
    number-sections: true
    df-print: kable
editor: source
execute: 
  eval: true
  warning: false
  message: false
toc-title: Contents
lang: en
---

# Libraries and functions

Load libraries and functions 

```{r}
library(data.table)
library(ggplot2)
library(scales)
library(xtable)
library(glue)
```


# Simulation results


```{r}
results_sample <- readRDS(file = "../results/sim-chen2020-jasa-modif.rds")
head(results_sample)
```

```{r}
pop_true_vals <- results_sample[, .(y, stat, true)] |> unique()
pop_true_vals[, y2:=factor(y, c("y1", "y2", "y3"), c("Y1", "Y2", "Y3"))]
```


# plots

```{r}
results_sample[stat == "mean"][, y2:=factor(y, c("y1", "y2", "y3"), c("Y1", "Y2", "Y3"))] |> 
  ggplot(data = _, aes(x = w, y = value)) +
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") + 
  stat_summary(fun = mean, geom = "point") + 
  facet_wrap(~y2, labeller = label_parsed)  + 
  geom_hline(data = pop_true_vals[stat == "mean", .(y2, stat, true)], 
             aes(yintercept = true), linetype = "dashed", color = "red") + 
  labs(x = "Estimator", y = "Value") +
  coord_flip() -> p1

p1
ggsave(plot = p1, filename = "../figs/sim-resp-mean.png", width = 8, height = 6)

```

```{r}
results_sample[stat != "mean"][, y2:=factor(y, c("y1", "y2", "y3"), c("Y1", "Y2", "Y3"))] |> 
  ggplot(data = _, aes(x = w, y = value)) +
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") + 
  stat_summary(fun = mean, geom = "point") + 
  facet_grid(stat ~ y2, scales = "free_y")  + 
    geom_hline(data = pop_true_vals[stat != "mean", .(y2, stat, true)], 
             aes(yintercept = true), linetype = "dashed", color = "red") + 
  labs(x = "Estimator", y = "Value") + 
  coord_flip() -> p2

p2
ggsave(plot = p2, filename = "../figs/sim-resp-quantiles.png", width = 8, height = 6)

```
Results for the table

```{r}
results_sample[, .(mean = mean(value), bias=mean(value)-mean(true), var = var(value)), .(y, estimator=stat, type=w)][
  , ":="(mse = bias^2+var, rmse = sqrt(bias^2+var))][order(y, estimator)][
    , .(y, 
        characteristic=estimator,
        estimator=type, 
        bias, se=sqrt(var), rmse)] |> 
  melt(id.vars = c("y", "characteristic", "estimator")) |> 
  transform(y = paste(y, variable, sep = "_")) |> 
  transform(variable = NULL,
            value = value*100) |> 
  dcast(... ~ y, value.var = "value") |> 
  {\(x) x[, .(characteristic, estimator, 
              y1_bias, y1_se, y1_rmse, 
              y2_bias, y2_se, y2_rmse, 
              y3_bias, y3_se, y3_rmse)]}() -> results_sim_estimated

results_sim_estimated
```

```{r}
results_sim_estimated |> 
  #subset(select = -(characteristic)) |> 
  xtable(digits=2) |> 
  print.xtable(include.rownames = F)
```




