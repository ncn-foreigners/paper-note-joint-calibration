---
title: "Simulation 3 - non-probability sample (estimated population totals)"
format: 
  html:
    self-contained: true
    table-of-contents: true
    number-sections: true
    df-print: kable
editor: source
execute: 
  eval: true
  warning: false
  message: false
toc-title: Contents
lang: en
---

# Libraries and functions

Load libraries and functions 

```{r}
library(data.table)
library(ggplot2)
library(scales)
library(xtable)
library(glue)
```


Reporting of results for the paper

```{r}
results_df <- readRDS("../results/sim-yang2021-svymeth.rds")
head(results_df)
```

Plots

```{r}
bd_lab <- c(
  bd1 = "Linear inclusion (BD1)",
  bd2 = "Nonlinear inclusion (BD2)"
)

ys <- c(
  y11 = "Linear model (Y11)",
  y12 = "Nonlinear model (Y12)",
  y21 = "Logistic linear (Y21)",
  y22 = "Logisitic nonlinear (Y22)"
)


```


```{r}
results_df[type == "mean"] |> 
  ggplot(data=_,aes(x = estimator, y= value)) +
  #geom_hline(yintercept = 0, linetype="dashed", color = "red") + 
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") +
  stat_summary(fun = mean, geom = "point") + 
  geom_hline(data=pop_true_vals[type == "mean"], aes(yintercept = true), linetype="dashed", color = "red") + 
  facet_grid(y~data, scales = "free_y", labeller = labeller(y=ys, data=bd_lab)) +
  labs(x = "Estimator", y = "Value") -> p1

ggsave(plot =p1, filename = "../figs/sim-nonprob-cases-mean.pdf", width = 6, height = 8)
ggsave(plot =p1, filename = "../figs/sim-nonprob-cases-mean.png", width = 6, height = 8)

results_df[type == "mean"] |> 
  ggplot(data=_,aes(x = estimator, y= (value-true)/true)) +
  #geom_hline(data=pop_true_vals[type == "mean"], aes(yintercept = true), linetype="dashed", color = "red") + 
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") +
  stat_summary(fun = mean, geom = "point") + 
  facet_grid(y~data, scales = "free_y", labeller = labeller(y=ys, data=bd_lab)) +
  scale_y_continuous(labels = percent)  +
  geom_hline(yintercept = 0, linetype="dashed", color = "red") + 
  labs(x = "Estimator", y = "Relative bias") -> p1


ggsave(plot =p1, filename = "../figs/sim-nonprob-cases-mean-relbias.pdf", width = 6, height = 8)
ggsave(plot =p1, filename = "../figs/sim-nonprob-cases-mean-relbias.png", width = 6, height = 8)
```

```{r}
for (q in c("q25", "q50", "q75")) {
  results_df[type == q] |> 
  ggplot(data=_,aes(x = estimator, y= value)) +
  #geom_hline(yintercept = 0, linetype="dashed", color = "red") + 
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") + 
  geom_hline(data=pop_true_vals[type == q & y %in% c("y11", "y12")], 
             aes(yintercept = true), linetype="dashed", color = "red") + 
  stat_summary(fun = mean, geom = "point") + 
  facet_grid(y~data, scales = "free_y", labeller = labeller(y=ys, data=bd_lab)) +
  labs(x = "Estimator", y = "Value")  -> p2


ggsave(plot =p2, filename = glue("../figs/sim-nonprob-cases-{q}.pdf"), width = 6, height = 4)
ggsave(plot =p2, filename = glue("../figs/sim-nonprob-cases-{q}.png"), width = 6, height = 4)

results_df[type == q] |> 
  ggplot(data=_,aes(x = estimator, y= (value-true)/true)) +
  #geom_hline(data=pop_true_vals[type == "mean"], aes(yintercept = true), linetype="dashed", color = "red") + 
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") +
  geom_hline(yintercept = 0, linetype="dashed", color = "red") + 
  stat_summary(fun = mean, geom = "point") + 
  facet_grid(y~data, scales = "free_y", labeller = labeller(y=ys, data=bd_lab)) +
  scale_y_continuous(labels = percent)  +
  labs(x = "Estimator", y = "Relative bias") -> p2


ggsave(plot =p2, filename = glue("../figs/sim-nonprob-cases-{q}-relbias.pdf"), width = 6, height = 4)
ggsave(plot =p2, filename = glue("../figs/sim-nonprob-cases-{q}-relbias.png"), width = 6, height = 4)

}


```



Table with results

```{r}
results_df[, .(m = mean(value), v=var(value), true = mean(true)), 
           keyby=.(data, type, estimator, y)][
  , bias:=m - true][
    , true:=NULL] |> 
  melt(id.vars = c("data", "type", "estimator", "y")) |> 
  subset(variable != "m") |> 
  transform(y1 = substr(y, 1, 2),
            y2 = substr(y, 3,3)) |> 
  transform(variable = paste("var", y2, data, variable, sep = "_"),
            type_m = NULL,
            y = NULL,
            y2 = NULL,
            data = NULL) |> 
  dcast(... ~ variable, value.var = "value") |> 
  {\(x) x[, .(type, y=y1, estimator, 
              ll_bias=var_1_bd1_bias*100, ll_se=sqrt(var_1_bd1_v)*100, ll_rmse=sqrt(var_1_bd1_bias^2+var_1_bd1_v*100),
              ln_bias=var_1_bd2_bias*100, ln_se=sqrt(var_1_bd2_v)*100, ln_rmse=sqrt(var_1_bd2_bias^2+var_1_bd2_v*100),
              nl_bias=var_2_bd1_bias*100, nl_se=sqrt(var_2_bd1_v)*100, nl_rmse=sqrt(var_2_bd1_bias^2+var_2_bd1_v*100),
              nn_bias=var_2_bd2_bias*100, nn_se=sqrt(var_2_bd2_v)*100, nn_rmse=sqrt(var_2_bd2_bias^2+var_2_bd2_v*100))]}() |> 
  {\(x) x[order(type, y, estimator)]}() |> 
  xtable(digits = 2) |> 
  print.xtable(include.rownames = F)
```

